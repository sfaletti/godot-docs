import codecs
import logging
import os

import attr

from bs4 import BeautifulSoup

from .utils import APPLE_REF_TEMPLATE, IParser, ParserEntry, has_file_with


log = logging.getLogger(__name__)


PYDOCTOR_HEADER = b"""\
        This documentation was automatically generated by
        <a href="https://github.com/twisted/pydoctor/">pydoctor</a>"""

PYDOCTOR_HEADER_OLD = b"""\
      This documentation was automatically generated by
      <a href="https://launchpad.net/pydoctor/">pydoctor</a>"""

PYDOCTOR_HEADER_REALLY_OLD = b"""\
      This documentation was automatically generated by
      <a href="http://codespeak.net/~mwh/pydoctor/">pydoctor</a>"""


@attr.s(hash=True)
class PyDoctorParser(IParser):
    """
    Parser for pydoctor-based documentation: mainly Twisted.
    """

    doc_path = attr.ib()

    name = "pydoctor"

    @classmethod
    def detect(cls, path):
        return (
            has_file_with(path, "index.html", PYDOCTOR_HEADER)
            or has_file_with(path, "index.html", PYDOCTOR_HEADER_OLD)
            or has_file_with(path, "index.html", PYDOCTOR_HEADER_REALLY_OLD)
        )

    def parse(self):
        """
        Parse pydoctor docs at *doc_path*.

        yield `ParserEntry`s
        """
        soup = BeautifulSoup(
            codecs.open(
                os.path.join(self.doc_path, "nameIndex.html"),
                mode="r",
                encoding="utf-8",
            ),
            "html.parser",
        )
        for tag in soup.body.find_all("a"):
            path = tag.get("href")
            data_type = tag.get("data-type")
            if path and data_type and not path.startswith("#"):
                name = tag.string
                yield ParserEntry(
                    name=name,
                    type=data_type.replace("Instance ", ""),
                    path=str(path),
                )

    def find_and_patch_entry(self, soup, entry):
        link = soup.find("a", attrs={"name": entry.anchor})
        if link:
            tag = soup.new_tag("a")
            tag["name"] = APPLE_REF_TEMPLATE.format(entry.type, entry.name)
            link.insert_before(tag)
            return True
        else:
            return False
